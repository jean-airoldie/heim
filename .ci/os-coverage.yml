parameters:
    toolchain: ''

jobs:
    - job: ${{ parameters.name }}
      # There is no reason to run tests coverage if tests are failing
      dependsOn: nightly
      condition: and(succeeded(), eq('${{ parameters.toolchain }}', 'nightly'))
      pool:
          vmImage: ${{ parameters.vmImage }}

      steps:
          - template: install-rust.yml
            parameters:
                toolchain: ${{ parameters.toolchain }}

          - script: |
                cargo +${{ parameters.toolchain }} install grcov
                cargo clean
            displayName: Install grcov

          - script: |
                cargo +${{ parameters.toolchain }} test --all --all-features
            displayName: Run tests suite
            env:
                CARGO_INCREMENTAL: 0
                ${{ if not(startsWith(parameters.vmImage, 'macOS')) }}:
                    RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
                ${{ if startsWith(parameters.vmImage, 'macOS') }}:
                    RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Coverflow-checks=off -Zno-landing-pads"

          - task: CopyFiles@2
            displayName: 'Gather coverage results'
            inputs:
                ${{ if not(startsWith(parameters.vmImage, 'windows')) }}:
                    contents: 'target/**/heim*.gc*'
                ${{ if startsWith(parameters.vmImage, 'windows') }}:
                    contents: 'target\**\heim*.gc*'
                TargetFolder: '$(Build.ArtifactStagingDirectory)'
                flattenFolders: true
                cleanTargetFolder: true

          - task: ArchiveFiles@2
            displayName: 'Create coverage archive'
            inputs:
                rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
                includeRootFolder: false
                archiveType: 'zip'
                tarCompression: 'none'
                ${{ if not(startsWith(parameters.vmImage, 'windows')) }}:
                    archiveFile: '$(Build.SourcesDirectory)/ccov.zip'
                ${{ if startsWith(parameters.vmImage, 'windows') }}:
                    archiveFile: '$(Build.SourcesDirectory)\ccov.zip'
                replaceExistingArchive: true

          - bash: |
                grcov ccov.zip \
                    -s . \
                    -t coveralls+ \
                    --llvm \
                    --branch \
                    --ignore-not-existing \
                    --ignore-dir "/*" \
                    --ignore-dir "C:/*" \
                    --commit-sha "${COMMIT_SHA}" \
                    --token "${COVERALLS_TOKEN}" \
                    --service-job-number "${CI_BUILD_NUMBER}" \
                    --service-name "${CI_NAME}" \
                    --service-number "${CI_BUILD_ID}" \
                    -o coverage.json
                cat coverage.json | sed -e "s#\"branch\":\"master\"#\"branch\":\"${CI_BRANCH}\"#" > coveralls.json
                curl --fail -F 'json_file=@coveralls.json' https://coveralls.io/api/v1/jobs
            displayName: Upload the results
            env:
                COVERALLS_TOKEN: $(coveralls.token)
                COMMIT_SHA: $(Build.SourceVersion)
                CI_NAME: "Azure DevOps"
                CI_BUILD_ID: $(Build.BuildId)
                CI_BUILD_NUMBER: $(Build.BuildNumber)
                CI_BUILD_URL: $(Build.BuildUri)
                CI_BRANCH: $(Build.SourceBranchName)
